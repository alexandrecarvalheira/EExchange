"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/J3Hs4lhqm1W
 */
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { TabsTrigger, TabsList, TabsContent, Tabs } from "@/components/ui/tabs";
import { generatePermits, revokePermits } from "@/lib/permits";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { contractStore } from "@/store/contractStore";
import { instanceStore } from "@/store/instanceStore";
import { useAccount } from "wagmi";
import { PermissionStruct } from "@/types/EncryptedERC20_ABI";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

declare global {
  interface Window {
    ethereum?: any;
  }
}

export function Swap() {
  //Zustand Store
  const contractAddress = contractStore((state) => state.contractAddress);
  const erc20 = contractStore((state) => state.erc20);
  const fhenix = instanceStore((state) => state.fhenix);
  const setFhenix = instanceStore((state) => state.setFhenix);
  const provider = instanceStore((state) => state.provider);

  //Wagmi
  const { address } = useAccount();

  //State
  const [balance, setBalance] = useState<string>("Encrypted");
  const [hasPermit, setHasPermit] = useState<boolean>(false);
  const [name, setName] = useState<string>("Encrypted");
  const [symbol, setSymbol] = useState<string>("ENC");
  const [totalSupply, setTotalSupply] = useState<number>(0);

  useEffect(() => {
    const getTokenData = async () => {
      const name = await erc20?.name();
      setName(name!);
      const symbol = await erc20?.symbol();
      setSymbol(symbol!);
      const totalSupply = await erc20?.totalSupply();
      setTotalSupply(Number(totalSupply!));
    };
    getTokenData();
  }, [erc20]);

  const getEncryptedBalance = async () => {
    const permit = fhenix!.exportPermits()[contractAddress!];
    const permission: PermissionStruct = fhenix!.extractPermitPermission(
      permit!
    );

    const EncryptedBalance = await erc20!.balanceOf(address!, permission);
    const DecryptedBalance = fhenix!.unseal(contractAddress!, EncryptedBalance);
    setBalance(String(DecryptedBalance));
  };

  const FormSchema = z.object({
    address: z.string(),
    amountIn: z.number().transform(async (amount) => {
      console.log(amount);
      return await fhenix?.encrypt_uint32(amount);
    }),
    amountOut: z.number().transform(async (amount) => {
      console.log(amount);
      return await fhenix?.encrypt_uint32(amount);
    }),
  });
  type FormInput = z.infer<typeof FormSchema>;

  const { register, handleSubmit, reset } = useForm<FormInput>({
    resolver: zodResolver(FormSchema),
  });

  const onSubmit: SubmitHandler<FormInput> = async (data) => {
    const { address, amountIn } = data;
    const tx = await erc20!["transfer(address,(bytes))"](
      address,
      amountIn as any
    );
  };
  return (
    <Tabs className="w-full max-w-md " defaultValue="swap">
      <TabsList className="flex">
        <TabsTrigger
          aria-selected="true"
          className="flex-1 text-center py-2 cursor-pointer"
          value="swap"
        >
          Swap
        </TabsTrigger>
        <TabsTrigger
          aria-selected="false"
          className="flex-1 text-center py-2 cursor-pointer"
          value="liquidity"
        >
          Add Liquidity
        </TabsTrigger>
      </TabsList>
      <TabsContent value="swap">
        <div
          key="1"
          className="flex flex-col items-center justify-center bg-gray-100 dark:bg-gray-900"
        >
          <div className="w-full max-w-md px-4 py-8 bg-white shadow-md rounded-lg dark:bg-gray-800">
            <div className="flex justify-center">
              <ConnectButton />{" "}
              {!hasPermit ? (
                <Button
                  className="ml-auto"
                  variant="outline"
                  onClick={async () => {
                    setFhenix(
                      await generatePermits(contractAddress!, provider!)
                    );
                    setHasPermit(true);
                  }}
                >
                  Generate Permits
                </Button>
              ) : (
                <Button
                  className="ml-auto"
                  variant="outline"
                  onClick={async () => {
                    setFhenix(
                      await revokePermits(contractAddress!, fhenix!, provider!)
                    );
                    setHasPermit(false);
                    setBalance("Encrypted");
                  }}
                >
                  Remove Permits
                </Button>
              )}
            </div>
            <div className="text-center my-4 flex gap-4 align-middle justify-center">
              <div>
                <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-200">
                  Token Name: {name}
                </h3>
                <p className="text-sm text-gray-700 dark:text-gray-200">
                  Symbol: {symbol}
                </p>
                <p className="text-sm text-gray-700 dark:text-gray-200">
                  Total Supply: {totalSupply}
                </p>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-200">
                  Token Name: {name}
                </h3>
                <p className="text-sm text-gray-700 dark:text-gray-200">
                  Symbol: {symbol}
                </p>
                <p className="text-sm text-gray-700 dark:text-gray-200">
                  Total Supply: {totalSupply}
                </p>
              </div>
            </div>
            <h2 className="text-3xl font-semibold text-center text-gray-800 dark:text-white">
              Encrypted Exchange
            </h2>
            <div className="mt-4 flex items-center justify-between">
              <span className="border-b w-1/5 lg:w-1/4" />
              <button
                className="text-xs text-center text-gray-500 uppercase dark:text-gray-400 hover:underline"
                onClick={async () => {
                  const tx = await erc20!.mint(1000);
                  tx.wait();
                  setTotalSupply(totalSupply + 1000);
                }}
              >
                Mint Tokens
              </button>
              <span className="border-b w-1/5 lg:w-1/4" />
            </div>
            <form
              className="mt-4"
              onSubmit={handleSubmit(onSubmit)}
              autoComplete="off"
              id="form"
            >
              <div className="flex flex-col mb-2 ">
                <div className="flex  items-center justify-between">
                  <Label className="text-center" htmlFor="addressIn">
                    {name}
                  </Label>
                  <p>
                    Balance:{" "}
                    {balance == "Encrypted" ? (
                      <Button
                        disabled={!hasPermit}
                        className="ml-auto"
                        variant="outline"
                        onClick={getEncryptedBalance}
                      >
                        decrypt
                      </Button>
                    ) : (
                      balance
                    )}
                  </p>
                </div>

                <Input
                  id="amount"
                  placeholder="0.0"
                  type="number"
                  {...register("amountIn", {
                    valueAsNumber: true,
                    required: true,
                  })}
                />
                <div className=" flex justify-center items-center">
                  <Button className=" w-fit my-10 text-center">switch</Button>
                </div>
                <div className="  mb-3 flex  items-center justify-between">
                  <Label className="text-center">{name}</Label>
                </div>
                <Input
                  id="amount"
                  placeholder="0.0"
                  type="number"
                  {...register("amountOut", {
                    valueAsNumber: true,
                    required: true,
                  })}
                />
              </div>
              <div className="flex items-center justify-between mt-4">
                <Button
                  className="w-full"
                  variant="outline"
                  type="submit"
                  form="form"
                  disabled={!hasPermit}
                >
                  Swap
                </Button>
              </div>
            </form>
          </div>
        </div>
      </TabsContent>
      <TabsContent value="liquidity">
        <div className="flex flex-col items-center justify-center bg-white shadow-md rounded-lg dark:bg-gray-800">
          <div className="flex justify-center">
            <ConnectButton />{" "}
            {!hasPermit ? (
              <Button
                className="ml-auto"
                variant="outline"
                onClick={async () => {
                  setFhenix(await generatePermits(contractAddress!, provider!));
                  setHasPermit(true);
                }}
              >
                Generate Permits
              </Button>
            ) : (
              <Button
                className="ml-auto"
                variant="outline"
                onClick={async () => {
                  setFhenix(
                    await revokePermits(contractAddress!, fhenix!, provider!)
                  );
                  setHasPermit(false);
                  setBalance("Encrypted");
                }}
              >
                Remove Permits
              </Button>
            )}
          </div>
          <div className="text-center my-4 flex gap-4 align-middle justify-center">
            <div>
              <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-200">
                Token Name: {name}
              </h3>
              <p className="text-sm text-gray-700 dark:text-gray-200">
                Symbol: {symbol}
              </p>
              <p className="text-sm text-gray-700 dark:text-gray-200">
                Total Supply: {totalSupply}
              </p>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-200">
                Token Name: {name}
              </h3>
              <p className="text-sm text-gray-700 dark:text-gray-200">
                Symbol: {symbol}
              </p>
              <p className="text-sm text-gray-700 dark:text-gray-200">
                Total Supply: {totalSupply}
              </p>
            </div>
          </div>
          <h2 className="text-3xl font-semibold text-center text-gray-800 dark:text-white">
            Encrypted Exchange
          </h2>
          <div className="w-full max-w-md px-4 py-8 bg-white shadow-md rounded-lg dark:bg-gray-800">
            <form className="mt-4">
              <div className="flex flex-col mb-2">
                <Label htmlFor="token1">{name}</Label>
              </div>
              <div className="flex flex-col mb-2">
                <Label htmlFor="amount1">Amount 1</Label>
                <Input
                  id="amount1"
                  placeholder="Enter Amount 1"
                  required
                  type="number"
                />
              </div>
              <div className="flex flex-col mb-2">
                <Label htmlFor="token2">{name}</Label>
              </div>
              <div className="flex flex-col mb-2">
                <Label htmlFor="amount2">Amount 2</Label>
                <Input
                  id="amount2"
                  placeholder="Enter Amount 2"
                  required
                  type="number"
                />
              </div>
              <div className="flex items-center justify-between mt-4">
                <Button className="w-full" variant="outline">
                  Add Liquidity
                </Button>
              </div>
            </form>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}
